//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package main

import (
	"context"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

	"encoding/json"
	"net/http"
	"io/ioutil"
	"fmt"
)

// OperationStatusClient contains the methods for the OperationStatus group.
// Don't use this type directly, use NewDeploymentStatusClient() instead.
type DeploymentStatusClient struct {
	internal       *arm.Client
	subscriptionID string
}

type ErrorDetails struct {
	Code    string `json:"code"`
	Message string `json:"message"`
 }
 
 type Error struct {
	Code    string       `json:"code"`
	Message string       `json:"message"`
	Details []ErrorDetails `json:"details"`
 }
 
 type DeploymentStatusResponse struct {
	Status string           `json:"status"`
	Error  map[string]interface{} `json:"error"`
 }
// NewDeploymentStatusClient creates a new instance of OperationStatusClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewDeploymentStatusClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*DeploymentStatusClient, error) {
	cl, err := arm.NewClient("armresources"+".DeploymentStatusClient", "v1.1.1", credential, options)
	if err != nil {
		return nil, err
	}
	client := &DeploymentStatusClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Get - Get Operation status
func (client *DeploymentStatusClient) getDeploymentStatusRequest(ctx context.Context, urlPath string) (*policy.Request, error) {
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DeploymentStatusClient) GetDeploymentStatus(ctx context.Context, urlPath string) (DeploymentStatusResponse, error) {
	req, err := client.getDeploymentStatusRequest(ctx, urlPath)
	if err != nil {
		return DeploymentStatusResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DeploymentStatusResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DeploymentStatusResponse{}, runtime.NewResponseError(resp)
	}
	return client.getDeploymentStatusHandleResponse(resp)
}

func (client *DeploymentStatusClient) getDeploymentStatusHandleResponse(resp *http.Response) (DeploymentStatusResponse, error) {
	data := DeploymentStatusResponse{}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return DeploymentStatusResponse{}, err
	}
	fmt.Println(body)

	err = json.Unmarshal(body, &data)
	if err != nil {
	return DeploymentStatusResponse{}, err
	}
	fmt.Println(data)
	return data, nil
}
